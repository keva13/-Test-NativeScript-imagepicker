"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var application = require("tns-core-modules/application");
var imageSourceModule = require("tns-core-modules/image-source");
var fileSystemModule = require("tns-core-modules/file-system");
var utils_1 = require("tns-core-modules/utils/utils");
var RESULT_CODE_PICKER_IMAGES = 9192;
var context = utils_1.ad.getApplicationContext();
var documents = fileSystemModule.knownFolders.documents();
var folder = documents.getFolder(fileSystemModule.knownFolders.temp().path);
var file = folder.getFile('test.jpg');
var ChooserService = /** @class */ (function () {
    function ChooserService() {
        this.width = 500;
        this.height = 500;
    }
    ChooserService.prototype.getChooserItems = function (intentList) {
        // let gallery = new android.content.Intent(android.content.Intent.ACTION_PICK,
        //     android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        // gallery.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
        // gallery.putExtra("return-data", true);
        var gallery = new android.content.Intent(android.content.Intent.ACTION_PICK);
        gallery.setType("image/*");
        // gallery.putExtra("crop", "true");
        // gallery.putExtra("scale", false);
        // gallery.putExtra("outputX", 256);
        // gallery.putExtra("outputY", 256);
        // gallery.putExtra("aspectX", 1);
        // gallery.putExtra("aspectY", 1);
        gallery.putExtra("return-data", true);
        var camera = new android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
        camera.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, android.net.Uri.fromFile(new java.io.File(android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES).getAbsolutePath().toString() + "/Test.jpg")));
        camera.putExtra("return-data", true);
        intentList = this.addIntentsToList(context, intentList, gallery);
        intentList = this.addIntentsToList(context, intentList, camera);
        console.log(intentList.length);
        console.log(intentList[0].icon);
    };
    ChooserService.prototype.addIntentsToList = function (context, list, intent) {
        var resInfo = context.getPackageManager().queryIntentActivities(intent, 0);
        var size = resInfo.size();
        for (var i = 0; i < size; i++) {
            var packageName = resInfo.get(i).activityInfo.packageName;
            var targetedIntent = new android.content.Intent(intent);
            targetedIntent.packageName = packageName;
            targetedIntent.icon = context.getPackageManager().getApplicationIcon(packageName).getBitmap();
            targetedIntent.label = context.getPackageManager().getApplicationLabel(context.getPackageManager().getApplicationInfo(packageName, 0));
            targetedIntent.setPackage(packageName);
            list.push(targetedIntent);
        }
        return list;
    };
    ChooserService.prototype.getImageFromIntent = function (intent, width, height) {
        var _this = this;
        if (width === void 0) { width = 500; }
        if (height === void 0) { height = 500; }
        this.width = width;
        this.height = height;
        this.currentIntent = intent.packageName;
        return new Promise(function (resolve, reject) {
            application.android.on(application.AndroidApplication.activityResultEvent, function (args) {
                _this.onResult(args).then(function (data) {
                    resolve(data);
                });
            });
            application.android.foregroundActivity.startActivityForResult(intent, RESULT_CODE_PICKER_IMAGES);
        });
    };
    ChooserService.prototype.onResult = function (args) {
        var _this = this;
        console.log('point0');
        return new Promise(function (resolve, reject) {
            var requestCode = args.requestCode;
            var resultCode = args.resultCode;
            var data = args.intent;
            if (requestCode === RESULT_CODE_PICKER_IMAGES) {
                console.log('point1');
                if (resultCode === android.app.Activity.RESULT_OK) {
                    console.log('point2');
                    console.log(args.intent);
                    var path = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES).getAbsolutePath().toString() + "/Test.jpg";
                    console.log(_this.currentIntent);
                    if (_this.currentIntent.length && _this.currentIntent.indexOf('camera') === -1) {
                        imageSourceModule.fromFile(_this._calculateFileUri(data.getData())).saveToFile(path, "jpg", 100);
                    }
                    if (_this.currentIntent.length) {
                        _this.currentIntent = '';
                        _this.takePicture(path);
                        return;
                    }
                    var uri = data.getExtras().getParcelable("data");
                    console.log('getExtras');
                    // let selectedAsset = new imageAssetModule.ImageAsset(this._calculateFileUri(uri));
                    // application.android.off(application.AndroidApplication.activityResultEvent, this.onResult);
                    resolve(imageSourceModule.fromNativeSource(uri).toBase64String("jpg"));
                    // console.log();
                    // console.log(imageSourceModule.fromFile(this._calculateFileUri(uri)).toBase64String("jpg"));
                    application.android.off(application.AndroidApplication.activityResultEvent);
                }
            }
        });
    };
    ChooserService.prototype.takePicture = function (uri) {
        console.log(imageSourceModule.fromFile(new java.io.File(uri)));
        var takePictureIntent = new android.content.Intent("com.android.camera.action.CROP");
        takePictureIntent.setDataAndType(android.net.Uri.fromFile(new java.io.File(uri)), "image/*");
        takePictureIntent.putExtra("crop", "true");
        takePictureIntent.putExtra("aspectX", 1);
        takePictureIntent.putExtra("aspectY", 1);
        takePictureIntent.putExtra("outputX", this.width);
        takePictureIntent.putExtra("outputY", this.height);
        takePictureIntent.putExtra("return-data", true);
        application.android.foregroundActivity.startActivityForResult(this.addIntentsToList(context, [], takePictureIntent)[0], RESULT_CODE_PICKER_IMAGES);
    };
    ChooserService.prototype._calculateFileUri = function (uri) {
        var DocumentsContract = android.provider.DocumentsContract;
        var isKitKat = android.os.Build.VERSION.SDK_INT >= 19;
        if (isKitKat && DocumentsContract.isDocumentUri(application.android.context, uri)) {
            var docId = void 0, id = void 0, type = void 0;
            var contentUri = null;
            // ExternalStorageProvider
            if (this.isExternalStorageDocument(uri)) {
                docId = DocumentsContract.getDocumentId(uri);
                id = docId.split(":")[1];
                type = docId.split(":")[0];
                if ("primary" === type.toLowerCase()) {
                    return android.os.Environment.getExternalStorageDirectory() + "/" + id;
                }
                // TODO handle non-primary volumes
            }
        }
        else {
            // MediaStore (and general)
            if ("content" === uri.getScheme()) {
                return this.getDataColumn(uri, null, null);
            }
            else if ("file" === uri.getScheme()) {
                return uri.getPath();
            }
        }
        return undefined;
    };
    ChooserService.prototype.getDataColumn = function (uri, selection, selectionArgs) {
        var cursor = null;
        var columns = [android.provider.MediaStore.MediaColumns.DATA];
        var filePath;
        try {
            cursor = this.getContentResolver().query(uri, columns, selection, selectionArgs, null);
            if (cursor != null && cursor.moveToFirst()) {
                var column_index = cursor.getColumnIndexOrThrow(columns[0]);
                filePath = cursor.getString(column_index);
                if (filePath) {
                    return filePath;
                }
            }
        }
        catch (e) {
            console.log(e);
        }
        finally {
            if (cursor) {
                cursor.close();
            }
        }
        return undefined;
    };
    ChooserService.prototype.isExternalStorageDocument = function (uri) {
        return "com.android.externalstorage.documents" === uri.getAuthority();
    };
    ChooserService.prototype.isDownloadsDocument = function (uri) {
        return "com.android.providers.downloads.documents" === uri.getAuthority();
    };
    ChooserService.prototype.isMediaDocument = function (uri) {
        return "com.android.providers.media.documents" === uri.getAuthority();
    };
    ChooserService.prototype.getContentResolver = function () {
        return application.android.nativeApp.getContentResolver();
    };
    ChooserService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], ChooserService);
    return ChooserService;
}());
exports.ChooserService = ChooserService;
//# sourceMappingURL=data:application/json;base64,